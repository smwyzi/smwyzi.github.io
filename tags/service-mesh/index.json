[{"content":"兴趣爱好\n Service Mesh Cloud Native Storage  ","description":"about me","id":0,"section":"","tags":null,"title":"About","uri":"/about/"},{"content":"Istio 是当今云原生领域最流行的服务网格产品之一，但如果你想要在生产环境中大规模落地，以下因素可能你是应该提前关注和思考的。\n使用 Istio 无法做到完全对应用透明 服务通信和治理相关的功能迁移到 Sidecar 进程中后, 应用中的 SDK 通常需要作出一些对应的改变。\n比如 SDK 需要关闭一些功能，例如重试。一个典型的场景是，SDK 重试 m 次，Sidecar 重试 n 次，这会导致 m * n 的重试风暴，从而引发风险。\n此外，诸如 trace header 的透传，也需要 SDK 进行支持。\nIstio 对非 K8S 环境的支持有限 只有 HTTP 协议是一等公民 扩展 Istio 的成本并不低 Istio 在集群规模较大时的性能问题 Istio 组件故障时是否有退路？ Isito 技术架构的成熟度还没有达到预期 Istio 缺乏成熟的产品生态 Istio 目前解决的问题域还很有限 ","description":"","id":1,"section":"posts","tags":["Istio","Service Mesh","Cloud Native"],"title":"2021年 Istio 大型“入坑”指南","uri":"/posts/the-facts-of-using-istio/"},{"content":"Service Mesh 作为下一代微服务技术的代名词，初出茅庐却深得人心一鸣惊人，大有一统微服务时代的趋势。\n那么到底什么是 Service Mesh？\n一言以蔽之：Service Mesh 是微服务时代的 TCP/IP 协议。\n初见 Service Mesh 有了这样一个感性的初步认知，我们再来看到底什么是 Service Mesh。\n提到 Service Mesh，就不得不提微服务。根据维基百科的定义：\n 微服务 (Microservices) 是一种软件架构风格，它是以专注于单一责任与功能的小型功能区块 (Small Building Blocks) 为基础，利用模块化的方式组合出复杂的大型应用程序，各功能区块使用与语言无关 (Language-Independent/Language agnostic) 的 API 集相互通信。\n 目前业界跟微服务相关的开发平台和框架更是不胜枚举：Spring Cloud， Service Fabric，Linkerd，Envoy，Istio \u0026hellip;\n这些纷繁的产品和 Sevice Mesh 有什么样的关联？哪些属于 Service Mesh 的范畴？\n为了理清这些繁复的产品和概念，我们先来了解下微服务和 Service Mesh 技术的历史发展脉络。\n了解清楚了技术的主要脉络，就能清晰的知道上述的各个平台、框架属于技术脉络中的哪个结点，其间的关系也就一目了然。\nPhil Calçado 的文章《Pattern: Service Mesh》详细的介绍了从开发者视角来看，服务开发模式和 Service Mesh 技术的演化过程，个人认为是非常经典的学习 Service Mesh 的资料。\n这里借用文章的脉络，结合自己的理解并予以简化，试图说清楚 Service Mesh 的概念和这项技术诞生的历史必然性。你可以把本文当做原文的一个中译本来阅读。\nService Mesh 的技术变迁 时代0：上古时代 开发人员想象中，不同服务间通信的方式，抽象表示如下：\n时代1：原始通信时代 然而现实远比想象的复杂，在实际情况中，通信需要底层能够传输字节码和电子信号的物理层来完成，在 TCP/IP 协议出现之前，服务需要自己处理网络通信所面临的丢包、乱序、重试等一系列流控问题，因此服务实现中，除了业务逻辑外，还夹杂着对网络传输问题的处理逻辑。\n时代2：TCP/IP 时代 为了避免每个服务都需要自己实现一套相似的网络传输处理逻辑，TCP/IP 协议出现了，它解决了网络传输中通用的流量控制问题，将技术栈下移，从服务的实现中抽离出来，成为操作系统网络层的一部分。\n时代3：第一代微服务 在 TCP/IP 出现之后，机器之间的网络通信不再是一个难题，以 GFS/BigTable/MapReduce 为代表的分布式系统得以蓬勃发展。这时，分布式系统特有的通信语义又出现了，如熔断策略、负载均衡、服务发现、认证和授权、quota 限制、trace 和监控等等，于是服务根据业务需求来实现一部分所需的通信语义。\n时代4：第二代微服务 为了避免每个服务都需要自己实现一套分布式系统通信的语义功能，随着技术的发展，一些面向微服务架构的开发框架出现了，如 Twitter 的 Finagle、Facebook 的 Proxygen 以及 Spring Cloud 等等，这些框架实现了分布式系统通信需要的各种通用语义功能：如负载均衡和服务发现等，因此一定程度上屏蔽了这些通信细节，使得开发人员使用较少的框架代码就能开发出健壮的分布式系统。\n时代5：第一代 Service Mesh 第二代微服务模式看似完美，但开发人员很快又发现，它也存在一些本质问题：\n 其一，虽然框架本身屏蔽了分布式系统通信的一些通用功能实现细节，但开发者却要花更多精力去掌握和管理复杂的框架本身，在实际应用中，去追踪和解决框架出现的问题也绝非易事；\n-其二，开发框架通常只支持一种或几种特定的语言，回过头来看文章最开始对微服务的定义，一个重要的特性就是语言无关，但那些没有框架支持的语言编写的服务，很难融入面向微服务的架构体系，想因地制宜的用多种语言实现架构体系中的不同模块也很难做到； 其三，框架以 lib 库的形式和服务联编，复杂项目依赖时的库版本兼容问题非常棘手，同时，框架库的升级也无法对服务透明，服务会因为和业务无关的 lib 库升级而被迫升级；  因此以 Linkerd，Envoy，Ngixmesh 为代表的代理模式（边车模式）应运而生，这就是第一代 Service Mesh，它将分布式服务的通信抽象为单独一层，在这一层中实现负载均衡、服务发现、认证授权、监控追踪、流量控制等等分布式系统所需要的功能，作为一个和服务对等的代理服务，和服务部署在一起，接管服务的流量，通过代理之间的通信间接完成服务之间的通信请求，这样上边所说的三个问题也迎刃而解。\n如果我们从一个全局视角来看，就会得到如下部署图：\n如果我们暂时略去服务，只看 Service Mesh 的单机组件组成的网络：\n相信现在，大家已经理解何所谓 Service Mesh，也就是服务网格了。它看起来确实就像是一个由若干服务代理所组成的错综复杂的网格。\n时代6：第二代 Service Mesh 第一代 Service Mesh 由一系列独立运行的单机代理服务构成，为了提供统一的上层运维入口，演化出了集中式的控制面板，所有的单机代理组件通过和控制面板交互进行网络拓扑策略的更新和单机数据的汇报。这就是以Istio为代表的第二代 Service Mesh。\n只看单机代理组件(数据面板)和控制面板的 Service Mesh 全局部署视图如下：\n至此，见证了6个时代的变迁，大家一定清楚了 Service Mesh 技术到底是什么，以及是如何一步步演化到今天这样一个形态。\n再看 Service Mesh 现在，我们再回过头来看 Buoyant 的 CEO William Morgan，也就是 Service Mesh 这个词的发明人，对 Service Mesh 的定义：\n 服务网格是一个基础设施层，用于处理服务间通信。云原生应用有着复杂的服务拓扑，服务网格保证请求在这些拓扑中可靠地穿梭。在实际应用当中，服务网格通常是由一系列轻量级的网络代理组成的，它们与应用程序部署在一起，但对应用程序透明。\n 这个定义中，有四个关键词：\n基础设施层+请求在这些拓扑中可靠穿梭：这两个词加起来描述了 Service Mesh 的定位和功能，是不是似曾相识？没错，你一定想到了 TCP/IP；\n网络代理：这描述了 Service Mesh 的实现形态；\n对应用透明：这描述了 Service Mesh 的关键特点，正是由于这个特点，Service Mesh 能够解决以 Spring Cloud 为代表的第二代微服务框架所面临的三个本质问题；\n总结: Service Mesh 的优缺点 总结一下，Service Mesh 具有如下优点：\n 屏蔽分布式系统通信的复杂性(负载均衡、服务发现、认证授权、监控追踪、流量控制等等)，服务只用关注业务逻辑； 真正的语言无关，服务可以用任何语言编写，只需和 Service Mesh 通信即可； 对应用透明，Service Mesh 组件可以单独升级；  当然，Service Mesh 目前也面临一些挑战：\n Service Mesh 组件以代理模式计算并转发请求，一定程度上会降低通信系统性能，并增加系统资源开销； Service Mesh 组件接管了网络流量，因此服务的整体稳定性依赖于 Service Mesh，同时额外引入的大量 Service Mesh 服务实例的运维和管理也是一个挑战；  历史总是惊人的相似。为了解决端到端的字节码通信问题，TCP/IP 协议诞生，让多机通信变得简单可靠；微服务时代，Service Mesh 应运而生，屏蔽了分布式系统的诸多复杂性，让开发者可以回归业务，聚焦真正的价值。\nRef  https://philcalcado.com/2017/08/03/pattern_service_mesh.html  ","description":"","id":6,"section":"posts","tags":["Service Mesh","Cloud Native"],"title":"什么是 Service Mesh","uri":"/posts/what-is-service-mesh/"}]